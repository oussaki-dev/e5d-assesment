// Mocks generated by Mockito 5.4.4 from annotations
// in e5d_assesment/test/beneficiary_tests.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:e5d_assesment/features/beneficiary/domain/model/abstract_beneficiary.dart'
    as _i7;
import 'package:e5d_assesment/features/beneficiary/domain/model/beneficiary_model.dart'
    as _i6;
import 'package:e5d_assesment/features/beneficiary/domain/repository/beneficiary_repository_interface.dart'
    as _i3;
import 'package:e5d_assesment/features/beneficiary/presentation/state/add_beneficiary_state.dart'
    as _i5;
import 'package:e5d_assesment/features/beneficiary/presentation/state/get_beneficiaries_state.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbstractBeneficiaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractBeneficiaryRepository extends _i1.Mock
    implements _i3.AbstractBeneficiaryRepository {
  MockAbstractBeneficiaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>> addBeneficiary(
          _i7.IBeneficiaryInput? beneficiary) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBeneficiary,
          [beneficiary],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>>.value(
            _FakeEither_0<_i5.AddBeneficiaryErrors, _i6.Beneficiary>(
          this,
          Invocation.method(
            #addBeneficiary,
            [beneficiary],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>>);

  @override
  _i4.Future<
      _i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>> removeBeneficiary(
          _i7.IBeneficiaryInput? beneficiary) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeBeneficiary,
          [beneficiary],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>>.value(
            _FakeEither_0<_i5.AddBeneficiaryErrors, _i6.Beneficiary>(
          this,
          Invocation.method(
            #removeBeneficiary,
            [beneficiary],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AddBeneficiaryErrors, _i6.Beneficiary>>);

  @override
  _i4.Future<_i2.Either<_i8.GetBeneficiariesUiStates, List<_i6.Beneficiary>>>
      getBeneficiaries() => (super.noSuchMethod(
            Invocation.method(
              #getBeneficiaries,
              [],
            ),
            returnValue: _i4.Future<
                _i2.Either<_i8.GetBeneficiariesUiStates,
                    List<_i6.Beneficiary>>>.value(_FakeEither_0<
                _i8.GetBeneficiariesUiStates, List<_i6.Beneficiary>>(
              this,
              Invocation.method(
                #getBeneficiaries,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i8.GetBeneficiariesUiStates, List<_i6.Beneficiary>>>);
}
